/// <reference types="node" resolution-mode="require"/>
import { FileExtension, MimeType } from 'file-type';
import { ImageFormat } from '../compressors/images.js';
type ImageMeta = {
    width: number | undefined;
    height: number | undefined;
    isProgressive: boolean;
    hasAlpha: boolean;
};
/**
 * File extension, mime and data are loaded only on demand, then cached.
 */
export declare class Resource {
    readonly src: string;
    readonly filePathAbsolute: string;
    private ext;
    private mime;
    private data;
    private image_meta;
    constructor(src: string, filePathAbsolute: string);
    getData(): Promise<Buffer>;
    getImageMeta(): Promise<ImageMeta | null | undefined>;
    getLen(): Promise<number>;
    getExt(): Promise<FileExtension | 'svg'>;
    getImageFormat(): Promise<ImageFormat | undefined>;
    getMime(): Promise<MimeType | 'image/svg+xml'>;
    private loadFileType;
    static loadResource(projectRoot: string, relativeFile: string, src: string): Promise<Resource | undefined>;
}
export declare function isLocal(src: string): boolean;
export declare function fileExists(path: string): Promise<boolean>;
export declare function translateSrc(projectRoot: string, htmlRelativePath: string, src: string): string;
export {};
