import { getImageCdnForUrl } from "./detect.js";
import { parse as contentful } from "./transformers/contentful.js";
import { parse as builder } from "./transformers/builder.io.js";
import { parse as imgix } from "./transformers/imgix.js";
import { parse as shopify } from "./transformers/shopify.js";
import { parse as wordpress } from "./transformers/wordpress.js";
import { parse as cloudimage } from "./transformers/cloudimage.js";
import { parse as cloudinary } from "./transformers/cloudinary.js";
import { parse as cloudflare } from "./transformers/cloudflare.js";
import { parse as bunny } from "./transformers/bunny.js";
import { parse as storyblok } from "./transformers/storyblok.js";
import { parse as kontentai } from "./transformers/kontent.ai.js";
import { parse as vercel } from "./transformers/vercel.js";
import { parse as nextjs } from "./transformers/nextjs.js";
import { parse as scene7 } from "./transformers/scene7.js";
import { parse as keycdn } from "./transformers/keycdn.js";
import { parse as directus } from "./transformers/directus.js";
import { parse as imageengine } from "./transformers/imageengine.js";
import { parse as contentstack } from "./transformers/contentstack.js";
import { parse as cloudflareImages } from "./transformers/cloudflare_images.js";
import { parse as ipx } from "./transformers/ipx.js";
import { parse as astro } from "./transformers/astro.js";
import { parse as netlify } from "./transformers/netlify.js";
import { parse as imagekit } from "./transformers/imagekit.js";
export const parsers = {
    imgix,
    contentful,
    "builder.io": builder,
    shopify,
    wordpress,
    cloudimage,
    cloudinary,
    cloudflare,
    bunny,
    storyblok,
    "kontent.ai": kontentai,
    vercel,
    nextjs,
    scene7,
    keycdn,
    directus,
    imageengine,
    contentstack,
    "cloudflare_images": cloudflareImages,
    ipx,
    astro,
    netlify,
    imagekit,
};
export const cdnIsSupportedForParse = (cdn) => cdn && cdn in parsers;
/**
 * Returns a parser function if the given URL is from a known image CDN
 * @param url
 */
export const getParserForUrl = (url) => getParserForCdn(getImageCdnForUrl(url));
export const getParserForCdn = (cdn) => {
    if (!cdn || !cdnIsSupportedForParse(cdn)) {
        return undefined;
    }
    return parsers[cdn];
};
/**
 * Parses an image URL into its components.
 * If the URL is not from a known image CDN it returns undefined.
 * @param url
 */
export const parseUrl = (url, cdn) => {
    if (cdn) {
        return getParserForCdn(cdn)?.(url);
    }
    const detectedCdn = getImageCdnForUrl(url);
    if (!detectedCdn) {
        return undefined;
    }
    if (!cdnIsSupportedForParse(detectedCdn)) {
        return { cdn: detectedCdn, base: url.toString() };
    }
    return getParserForCdn(detectedCdn)?.(url);
};
