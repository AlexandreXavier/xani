import { getNumericParam, setParamIfDefined, toUrl, toCanonicalUrlString, } from "../utils.js";
import { getImageCdnForUrlByDomain } from "../detect.js";
export const delegateUrl = (url) => {
    const parsedUrl = toUrl(url);
    const searchParamHref = parsedUrl.searchParams.get("href");
    const decodedHref = typeof searchParamHref === "string"
        ? decodeURIComponent(searchParamHref)
        : new URL(parsedUrl.pathname, parsedUrl.origin).toString();
    const source = toCanonicalUrlString(toUrl(decodedHref));
    if (!source || !source.startsWith("http")) {
        return false;
    }
    const cdn = getImageCdnForUrlByDomain(source);
    if (!cdn) {
        return false;
    }
    return {
        cdn,
        url: source,
    };
};
export const parse = (url) => {
    const parsedUrl = toUrl(url);
    const searchParamHref = parsedUrl.searchParams.get("href");
    const decodedHref = typeof searchParamHref === "string"
        ? decodeURIComponent(searchParamHref)
        : new URL(parsedUrl.pathname, parsedUrl.origin).toString();
    const encodedHref = encodeURIComponent(toCanonicalUrlString(toUrl(decodedHref)));
    const width = getNumericParam(parsedUrl, "w") || undefined;
    const height = getNumericParam(parsedUrl, "h") || undefined;
    const format = parsedUrl.searchParams.get("f") || undefined;
    const quality = parsedUrl.searchParams.get("q") || undefined;
    return {
        width,
        height,
        format,
        base: `/_image?href=${encodedHref}`,
        params: { quality, href: encodedHref },
        cdn: "astro",
    };
};
export const transform = ({ url: originalUrl, width, height, format, }) => {
    const parsedUrl = toUrl(originalUrl);
    const href = toCanonicalUrlString(new URL(parsedUrl.pathname, parsedUrl.origin));
    const url = { searchParams: new URLSearchParams() };
    setParamIfDefined(url, "href", href, true, true);
    setParamIfDefined(url, "w", width, true, true);
    setParamIfDefined(url, "h", height, true, true);
    setParamIfDefined(url, "f", format);
    return `/_image?${url.searchParams.toString()}`;
};
