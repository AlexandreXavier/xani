"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseUrl = exports.getParserForCdn = exports.getParserForUrl = exports.cdnIsSupportedForParse = exports.parsers = void 0;
const detect_js_1 = require("./detect.js");
const contentful_js_1 = require("./transformers/contentful.js");
const builder_io_js_1 = require("./transformers/builder.io.js");
const imgix_js_1 = require("./transformers/imgix.js");
const shopify_js_1 = require("./transformers/shopify.js");
const wordpress_js_1 = require("./transformers/wordpress.js");
const cloudimage_js_1 = require("./transformers/cloudimage.js");
const cloudinary_js_1 = require("./transformers/cloudinary.js");
const cloudflare_js_1 = require("./transformers/cloudflare.js");
const bunny_js_1 = require("./transformers/bunny.js");
const storyblok_js_1 = require("./transformers/storyblok.js");
const kontent_ai_js_1 = require("./transformers/kontent.ai.js");
const vercel_js_1 = require("./transformers/vercel.js");
const nextjs_js_1 = require("./transformers/nextjs.js");
const scene7_js_1 = require("./transformers/scene7.js");
const keycdn_js_1 = require("./transformers/keycdn.js");
const directus_js_1 = require("./transformers/directus.js");
const imageengine_js_1 = require("./transformers/imageengine.js");
const contentstack_js_1 = require("./transformers/contentstack.js");
const cloudflare_images_js_1 = require("./transformers/cloudflare_images.js");
const ipx_js_1 = require("./transformers/ipx.js");
const astro_js_1 = require("./transformers/astro.js");
const netlify_js_1 = require("./transformers/netlify.js");
const imagekit_js_1 = require("./transformers/imagekit.js");
exports.parsers = {
    imgix: imgix_js_1.parse,
    contentful: contentful_js_1.parse,
    "builder.io": builder_io_js_1.parse,
    shopify: shopify_js_1.parse,
    wordpress: wordpress_js_1.parse,
    cloudimage: cloudimage_js_1.parse,
    cloudinary: cloudinary_js_1.parse,
    cloudflare: cloudflare_js_1.parse,
    bunny: bunny_js_1.parse,
    storyblok: storyblok_js_1.parse,
    "kontent.ai": kontent_ai_js_1.parse,
    vercel: vercel_js_1.parse,
    nextjs: nextjs_js_1.parse,
    scene7: scene7_js_1.parse,
    keycdn: keycdn_js_1.parse,
    directus: directus_js_1.parse,
    imageengine: imageengine_js_1.parse,
    contentstack: contentstack_js_1.parse,
    "cloudflare_images": cloudflare_images_js_1.parse,
    ipx: ipx_js_1.parse,
    astro: astro_js_1.parse,
    netlify: netlify_js_1.parse,
    imagekit: imagekit_js_1.parse,
};
const cdnIsSupportedForParse = (cdn) => cdn && cdn in exports.parsers;
exports.cdnIsSupportedForParse = cdnIsSupportedForParse;
/**
 * Returns a parser function if the given URL is from a known image CDN
 * @param url
 */
const getParserForUrl = (url) => (0, exports.getParserForCdn)((0, detect_js_1.getImageCdnForUrl)(url));
exports.getParserForUrl = getParserForUrl;
const getParserForCdn = (cdn) => {
    if (!cdn || !(0, exports.cdnIsSupportedForParse)(cdn)) {
        return undefined;
    }
    return exports.parsers[cdn];
};
exports.getParserForCdn = getParserForCdn;
/**
 * Parses an image URL into its components.
 * If the URL is not from a known image CDN it returns undefined.
 * @param url
 */
const parseUrl = (url, cdn) => {
    if (cdn) {
        return (0, exports.getParserForCdn)(cdn)?.(url);
    }
    const detectedCdn = (0, detect_js_1.getImageCdnForUrl)(url);
    if (!detectedCdn) {
        return undefined;
    }
    if (!(0, exports.cdnIsSupportedForParse)(detectedCdn)) {
        return { cdn: detectedCdn, base: url.toString() };
    }
    return (0, exports.getParserForCdn)(detectedCdn)?.(url);
};
exports.parseUrl = parseUrl;
