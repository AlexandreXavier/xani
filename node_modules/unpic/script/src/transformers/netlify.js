"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transform = exports.generate = exports.parse = void 0;
const utils_js_1 = require("../utils.js");
const skippedParams = new Set([
    "w",
    "h",
    "q",
    "fm",
    "url",
    "width",
    "height",
    "quality",
]);
const parse = (url) => {
    const parsed = (0, utils_js_1.toUrl)(url);
    const width = Number(parsed.searchParams.get("w") ?? parsed.searchParams.get("width")) ??
        undefined;
    const height = Number(parsed.searchParams.get("h") ?? parsed.searchParams.get("height")) ??
        undefined;
    const quality = Number(parsed.searchParams.get("q") ?? parsed.searchParams.get("quality")) || undefined;
    const format = parsed.searchParams.get("fm") || undefined;
    const base = parsed.searchParams.get("url") || "";
    const params = {
        quality,
    };
    parsed.searchParams.forEach((value, key) => {
        if (skippedParams.has(key)) {
            return;
        }
        params[key] = value;
    });
    parsed.search = "";
    return {
        base,
        width,
        height,
        format,
        params,
        cdn: "netlify",
    };
};
exports.parse = parse;
const generate = ({ base, width, height, format, params: { site, quality, ...params } = {} }) => {
    const url = (0, utils_js_1.toUrl)("/.netlify/images", site);
    Object.entries(params).forEach(([key, value]) => (0, utils_js_1.setParamIfDefined)(url, key, value));
    (0, utils_js_1.setParamIfDefined)(url, "q", quality, true, true);
    (0, utils_js_1.setParamIfDefined)(url, "w", width, true, true);
    (0, utils_js_1.setParamIfDefined)(url, "h", height, true, true);
    (0, utils_js_1.setParamIfDefined)(url, "fm", format);
    (0, utils_js_1.setParamIfUndefined)(url, "fit", "cover");
    url.searchParams.set("url", base.toString());
    return (0, utils_js_1.toCanonicalUrlString)(url);
};
exports.generate = generate;
const transform = (options) => {
    const url = (0, utils_js_1.toUrl)(options.url);
    // If this is a Netlify image URL, we'll manipulate it rather than using it as the source image
    if (url.pathname.startsWith("/.netlify/images")) {
        const { params, base, format } = (0, exports.parse)(url);
        return (0, exports.generate)({
            base,
            format,
            ...options,
            params: {
                ...params,
                // If hostname is "n", we're dealing with a relative URL, so we don't need to set the site param
                site: url.hostname === "n" ? undefined : url.origin,
            },
        });
    }
    return (0, exports.generate)({
        ...options,
        base: options.url,
        params: {
            site: options.cdnOptions?.netlify?.site,
        },
    });
};
exports.transform = transform;
