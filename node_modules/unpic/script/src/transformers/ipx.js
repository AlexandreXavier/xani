"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transform = exports.generate = exports.parse = void 0;
const utils_js_1 = require("../utils.js");
/**
 * Parses the CDN/server's native URL format
 */
const parse = (imageUrl) => {
    const url = (0, utils_js_1.toUrl)(imageUrl);
    const [modifiers, ...id] = url.pathname.split("/").slice(1);
    const params = Object.fromEntries(modifiers.split(",").map((modifier) => {
        const [key, value] = modifier.split("_");
        return [key, value];
    }));
    if (params.s) {
        const [width, height] = params.s.split("x");
        params.w ||= width;
        params.h ||= height;
    }
    return {
        base: id.join("/"),
        width: Number(params.w) || undefined,
        height: Number(params.h) || undefined,
        quality: Number(params.q) || undefined,
        format: params.f || "auto",
        params,
        cdn: "ipx",
    };
};
exports.parse = parse;
const generate = ({ base: id, width, height, format, params }) => {
    const modifiers = params?.modifiers ?? {};
    if (width && height) {
        modifiers.s = `${width}x${height}`;
    }
    else if (width) {
        modifiers.w = `${width}`;
    }
    else if (height) {
        modifiers.h = `${height}`;
    }
    if (format) {
        modifiers.f = format;
    }
    const base = params?.base.endsWith("/") ? params?.base : `${params?.base}/`;
    const modifiersString = Object.entries(modifiers).map(([key, value]) => `${key}_${value}`).join(",");
    const stringId = id.toString();
    const image = stringId.startsWith("/") ? stringId.slice(1) : stringId;
    return `${base}${modifiersString}/${image}`;
};
exports.generate = generate;
const transform = (options) => {
    const url = String(options.url);
    const parsedUrl = (0, utils_js_1.toUrl)(url);
    const defaultBase = (parsedUrl.pathname.startsWith("/_ipx") && parsedUrl.hostname !== "n")
        ? `${parsedUrl.origin}/_ipx`
        : "/_ipx";
    const base = options.cdnOptions?.ipx?.base ?? defaultBase;
    const isIpxUrl = base && base !== "/" && url.startsWith(base);
    if (isIpxUrl) {
        const parsed = (0, exports.parse)(url.replace(base, ""));
        return (0, exports.generate)({
            ...parsed,
            ...options,
            params: {
                ...options.cdnOptions?.ipx,
                base,
            },
        });
    }
    return (0, exports.generate)({
        ...options,
        base: url,
        params: {
            ...options.cdnOptions?.ipx,
            base,
        },
    });
};
exports.transform = transform;
