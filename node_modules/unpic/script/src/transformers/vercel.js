"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transform = exports.generate = exports.delegateUrl = exports.parse = void 0;
const utils_js_1 = require("../utils.js");
const detect_js_1 = require("../detect.js");
const parse = (url) => {
    const parsed = (0, utils_js_1.toUrl)(url);
    const width = Number(parsed.searchParams.get("w")) || undefined;
    const quality = Number(parsed.searchParams.get("q")) || undefined;
    return {
        base: parsed.toString(),
        width,
        quality,
        cdn: "vercel",
    };
};
exports.parse = parse;
const delegateUrl = (url) => {
    const parsed = (0, utils_js_1.toUrl)(url);
    const source = parsed.searchParams.get("url");
    if (!source || !source.startsWith("http")) {
        return false;
    }
    const cdn = (0, detect_js_1.getImageCdnForUrlByDomain)(source);
    if (!cdn) {
        return false;
    }
    return {
        cdn,
        url: source,
    };
};
exports.delegateUrl = delegateUrl;
const generate = ({ base, width, params: { quality = 75, root = "_vercel" } = {} }) => {
    // If the base is a relative URL, we need to add a dummy host to the URL
    const url = new URL("http://n");
    url.pathname = `/${root}/image`;
    url.searchParams.set("url", base.toString());
    (0, utils_js_1.setParamIfDefined)(url, "w", width, false, true);
    (0, utils_js_1.setParamIfUndefined)(url, "q", quality);
    return (0, utils_js_1.toRelativeUrl)(url);
};
exports.generate = generate;
const transform = ({ url, width, cdn }) => {
    // the URL might be relative, so we need to add a dummy host to it
    const parsedUrl = (0, utils_js_1.toUrl)(url);
    const isNextImage = parsedUrl.pathname.startsWith("/_next/image") ||
        parsedUrl.pathname.startsWith("/_vercel/image");
    const src = isNextImage ? parsedUrl.searchParams.get("url") : url.toString();
    if (!src) {
        return undefined;
    }
    (0, utils_js_1.setParamIfDefined)(parsedUrl, "w", width, true, true);
    if (isNextImage) {
        return (0, utils_js_1.toCanonicalUrlString)(parsedUrl);
    }
    return (0, exports.generate)({
        base: src,
        width,
        params: { root: cdn === "nextjs" ? "_next" : "_vercel" },
    });
};
exports.transform = transform;
