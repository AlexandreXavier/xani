"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDirectives = exports.maybe_create_directive = exports.build_IE_query_string = exports.build_IE_directives = exports.transform = exports.getBaseUrl = exports.getParameterArray = exports.getDirective = exports.parse = exports.OBJECT_TO_DIRECTIVES_MAP = void 0;
const utils_js_1 = require("../utils.js");
exports.OBJECT_TO_DIRECTIVES_MAP = {
    width: "w",
    height: "h",
    autoWidthWithFallback: "w_auto",
    auto_width_fallback: "w_auto",
    scaleToScreenWidth: "pc",
    scale_to_screen_width: "pc",
    crop: "cr",
    outputFormat: "f",
    format: "f",
    fit: "m",
    fitMethod: "m",
    compression: "cmpr",
    sharpness: "s",
    rotate: "r",
    inline: "in",
    keepMeta: "meta",
    keep_meta: "meta",
    noOptimization: "pass",
    no_optimization: "pass",
    force_download: "dl",
    max_device_pixel_ratio: "maxdpr",
    maxDevicePixelRatio: "maxdpr"
};
const parse = (imageUrl) => {
    const parsedUrl = (0, utils_js_1.toUrl)(imageUrl);
    const paramArray = getParameterArray(parsedUrl);
    const baseUrl = getBaseUrl(parsedUrl);
    let width = undefined, height = undefined, format = undefined;
    const params = {};
    if (paramArray.length > 0) {
        paramArray.forEach((para) => {
            let key_value = para.split("_");
            if (key_value.length > 1) {
                switch (key_value[0]) {
                    case 'w':
                        width = Number(key_value[1]);
                        break;
                    case 'h':
                        height = Number(key_value[1]);
                        break;
                    case 'f':
                        format = key_value[1];
                        break;
                    default:
                        if (Object.values(exports.OBJECT_TO_DIRECTIVES_MAP).includes(key_value[0])) {
                            let directive = getDirective(key_value[0]);
                            params[directive] = key_value[1];
                        }
                }
            }
        });
    }
    return {
        base: baseUrl,
        width,
        height,
        format,
        params,
        cdn: "imageengine",
    };
};
exports.parse = parse;
function getDirective(key) {
    let keyArray = Object.keys(exports.OBJECT_TO_DIRECTIVES_MAP);
    let directive = keyArray.find(k => exports.OBJECT_TO_DIRECTIVES_MAP[k] === key) || "";
    return directive;
}
exports.getDirective = getDirective;
;
function getParameterArray(url) {
    let url_string = url.toString();
    let paramArray = [];
    if (url_string) {
        let splitURL = url_string.split("imgeng=");
        if (splitURL.length > 1) {
            paramArray = splitURL[1].split("/");
        }
    }
    return paramArray;
}
exports.getParameterArray = getParameterArray;
;
function getBaseUrl(url) {
    let url_string = url.toString();
    let baseUrl = "";
    if (url_string) {
        let splitURL = url_string.split("imgeng=");
        if (splitURL.length > 1) {
            baseUrl = splitURL[0].slice(0, -1);
        }
        else
            baseUrl = url_string;
    }
    return baseUrl;
}
exports.getBaseUrl = getBaseUrl;
;
const transform = ({ url: originalUrl, width, height, format }) => {
    const url = (0, utils_js_1.toUrl)(originalUrl);
    const src = getBaseUrl(url);
    let directives = {};
    const param = url.toString() === src ? [] : getParameterArray(url);
    if (param.length) {
        directives = getDirectives(param);
    }
    if (width)
        directives["width"] = width;
    if (height)
        directives["height"] = height;
    if (format)
        directives["format"] = format;
    if (!directives.hasOwnProperty('fit')) {
        directives = { ...directives, "fit": "cropbox" };
    }
    let directives_string = build_IE_directives(directives);
    let query_string = build_IE_query_string(directives_string);
    let query_prefix = query_string === "" ? "" : (src.includes("?") ? "&" : "?");
    return `${src}${query_prefix}${query_string}`;
};
exports.transform = transform;
function build_IE_directives(directives) {
    return Object.entries(directives).reduce((acc, [k, v]) => {
        return acc + maybe_create_directive(k, v);
    }, "");
}
exports.build_IE_directives = build_IE_directives;
;
function build_IE_query_string(directives_string) {
    if (directives_string && directives_string !== "") {
        return `imgeng=${directives_string}`;
    }
    return "";
}
exports.build_IE_query_string = build_IE_query_string;
;
function maybe_create_directive(directive, value) {
    let translated_directive = exports.OBJECT_TO_DIRECTIVES_MAP[directive];
    if (translated_directive && (value || value === 0)) {
        return `/${translated_directive}_${value}`;
    }
    return "";
}
exports.maybe_create_directive = maybe_create_directive;
;
function getDirectives(paramArray) {
    let directives = {};
    paramArray.forEach((para) => {
        let keyValue = para.split("_");
        if (keyValue.length > 1) {
            let key = keyValue[0];
            let value = keyValue[1];
            let directiveKey = getDirective(key);
            if (directiveKey) {
                directives[directiveKey] = value;
            }
        }
    });
    return directives;
}
exports.getDirectives = getDirectives;
