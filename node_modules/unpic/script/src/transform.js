"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTransformerForUrl = exports.transformUrl = exports.getTransformerForCdn = exports.getTransformer = void 0;
const detect_js_1 = require("./detect.js");
const contentful_js_1 = require("./transformers/contentful.js");
const builder_io_js_1 = require("./transformers/builder.io.js");
const imgix_js_1 = require("./transformers/imgix.js");
const shopify_js_1 = require("./transformers/shopify.js");
const wordpress_js_1 = require("./transformers/wordpress.js");
const cloudimage_js_1 = require("./transformers/cloudimage.js");
const cloudinary_js_1 = require("./transformers/cloudinary.js");
const cloudflare_js_1 = require("./transformers/cloudflare.js");
const bunny_js_1 = require("./transformers/bunny.js");
const storyblok_js_1 = require("./transformers/storyblok.js");
const kontent_ai_js_1 = require("./transformers/kontent.ai.js");
const vercel_js_1 = require("./transformers/vercel.js");
const nextjs_js_1 = require("./transformers/nextjs.js");
const scene7_js_1 = require("./transformers/scene7.js");
const keycdn_js_1 = require("./transformers/keycdn.js");
const directus_js_1 = require("./transformers/directus.js");
const imageengine_js_1 = require("./transformers/imageengine.js");
const contentstack_js_1 = require("./transformers/contentstack.js");
const cloudflare_images_js_1 = require("./transformers/cloudflare_images.js");
const ipx_js_1 = require("./transformers/ipx.js");
const astro_js_1 = require("./transformers/astro.js");
const netlify_js_1 = require("./transformers/netlify.js");
const imagekit_js_1 = require("./transformers/imagekit.js");
const canonical_js_1 = require("./canonical.js");
const getTransformer = (cdn) => ({
    imgix: imgix_js_1.transform,
    contentful: contentful_js_1.transform,
    "builder.io": builder_io_js_1.transform,
    shopify: shopify_js_1.transform,
    wordpress: wordpress_js_1.transform,
    cloudimage: cloudimage_js_1.transform,
    cloudinary: cloudinary_js_1.transform,
    bunny: bunny_js_1.transform,
    storyblok: storyblok_js_1.transform,
    cloudflare: cloudflare_js_1.transform,
    vercel: vercel_js_1.transform,
    nextjs: nextjs_js_1.transform,
    scene7: scene7_js_1.transform,
    "kontent.ai": kontent_ai_js_1.transform,
    keycdn: keycdn_js_1.transform,
    directus: directus_js_1.transform,
    imageengine: imageengine_js_1.transform,
    contentstack: contentstack_js_1.transform,
    "cloudflare_images": cloudflare_images_js_1.transform,
    ipx: ipx_js_1.transform,
    astro: astro_js_1.transform,
    netlify: netlify_js_1.transform,
    imagekit: imagekit_js_1.transform,
}[cdn]);
exports.getTransformer = getTransformer;
/**
 * Returns a transformer function if the given CDN is supported
 */
const getTransformerForCdn = (cdn) => {
    if (!cdn) {
        return undefined;
    }
    return (0, exports.getTransformer)(cdn);
};
exports.getTransformerForCdn = getTransformerForCdn;
/**
 * Transforms an image URL to a new URL with the given options.
 * If the URL is not from a known image CDN it returns undefined.
 */
const transformUrl = (options) => {
    const cdn = options?.cdn ?? (0, detect_js_1.getImageCdnForUrl)(options.url);
    // Default to recursive
    if (!(options.recursive ?? true)) {
        return (0, exports.getTransformerForCdn)(cdn)?.(options);
    }
    const canonical = (0, canonical_js_1.getCanonicalCdnForUrl)(options.url, cdn);
    if (!canonical || !canonical.cdn) {
        return undefined;
    }
    return (0, exports.getTransformer)(canonical.cdn)?.({
        ...options,
        url: canonical.url,
    });
};
exports.transformUrl = transformUrl;
/**
 * Returns a transformer function if the given URL is from a known image CDN
 *
 * @deprecated Use `getCanonicalCdnForUrl` and `getTransformerForCdn` instead
 */
const getTransformerForUrl = (url) => (0, exports.getTransformerForCdn)((0, detect_js_1.getImageCdnForUrl)(url));
exports.getTransformerForUrl = getTransformerForUrl;
