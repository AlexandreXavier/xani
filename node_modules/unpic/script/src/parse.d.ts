import { ImageCdn, ParsedUrl, UrlParser } from "./types.js";
export declare const parsers: {
    imgix: UrlParser<Record<string, unknown>>;
    contentful: UrlParser<{
        fit?: string | undefined;
    }>;
    "builder.io": UrlParser<{
        fit?: string | undefined;
        quality?: number | undefined;
    }>;
    shopify: UrlParser<{
        crop?: string | undefined;
        size?: string | undefined;
    }>;
    wordpress: UrlParser<{
        crop?: boolean | undefined;
    }>;
    cloudimage: UrlParser<import("./transformers/cloudimage.js").CloudimageParams>;
    cloudinary: UrlParser<import("./transformers/cloudinary.js").CloudinaryParams>;
    cloudflare: UrlParser<import("./transformers/cloudflare.js").CloudflareParams>;
    bunny: UrlParser<{
        fit?: string | undefined;
    }>;
    storyblok: UrlParser<import("./transformers/storyblok.js").StoryblokParams>;
    "kontent.ai": UrlParser<{
        fit?: string | undefined;
    }>;
    vercel: UrlParser<Record<string, unknown>>;
    nextjs: UrlParser<Record<string, unknown>>;
    scene7: UrlParser<{
        fit?: string | undefined;
        scale?: number | undefined;
        quality?: number | undefined;
    }>;
    keycdn: UrlParser<import("./transformers/keycdn.js").KeyCDNParams>;
    directus: UrlParser<import("./transformers/directus.js").DirectusParams>;
    imageengine: UrlParser<import("./transformers/imageengine.js").ImageEngineParams>;
    contentstack: UrlParser<{
        fit?: string | undefined;
    }>;
    cloudflare_images: UrlParser<import("./transformers/cloudflare_images.js").CloudflareImagesParams>;
    ipx: UrlParser<Record<string, unknown>>;
    astro: UrlParser<import("./transformers/astro.js").AstroParams>;
    netlify: UrlParser<Record<string, unknown>>;
    imagekit: UrlParser<Record<string, unknown>>;
};
export declare const cdnIsSupportedForParse: (cdn: ImageCdn | false) => cdn is ImageCdn;
/**
 * Returns a parser function if the given URL is from a known image CDN
 * @param url
 */
export declare const getParserForUrl: <TParams extends Record<string, unknown>>(url: string | URL) => UrlParser<TParams> | undefined;
export declare const getParserForCdn: <TParams extends Record<string, unknown>>(cdn: ImageCdn | false | undefined) => UrlParser<TParams> | undefined;
/**
 * Parses an image URL into its components.
 * If the URL is not from a known image CDN it returns undefined.
 * @param url
 */
export declare const parseUrl: <TParams = Record<string, unknown>>(url: string | URL, cdn?: ImageCdn) => ParsedUrl<TParams> | undefined;
