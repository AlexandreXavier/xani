import { roundIfNumeric, toUrl } from "../utils.js";
const ALLOWED_FORMATS = ["origin"];
const STORAGE_URL_PREFIX = "/storage/v1/object/public/";
const RENDER_URL_PREFIX = "/storage/v1/render/image/public/";
const isRenderUrl = (url) => url.pathname.startsWith(RENDER_URL_PREFIX);
export const parse = (imageUrl) => {
    const url = toUrl(imageUrl);
    const isRender = isRenderUrl(url);
    if (!isRender) {
        return {
            cdn: "supabase",
            base: url.origin + url.pathname,
        };
    }
    const imagePath = url.pathname.replace(RENDER_URL_PREFIX, "");
    const quality = url.searchParams.has("quality")
        ? Number(url.searchParams.get("quality"))
        : undefined;
    const width = url.searchParams.has("width")
        ? Number(url.searchParams.get("width"))
        : undefined;
    const height = url.searchParams.has("height")
        ? Number(url.searchParams.get("height"))
        : undefined;
    const format = url.searchParams.has("format")
        ? url.searchParams.get("format")
        : undefined;
    const resize = url.searchParams.has("resize")
        ? url.searchParams.get("resize")
        : undefined;
    return {
        cdn: "supabase",
        base: url.origin + STORAGE_URL_PREFIX + imagePath,
        width,
        height,
        format,
        params: {
            quality,
            resize,
        },
    };
};
export const generate = ({ base, width, height, format, params }) => {
    const parsed = parse(base.toString());
    base = parsed.base;
    width = width || parsed.width;
    height = height || parsed.height;
    format = format || parsed.format;
    params = { ...parsed.params, ...params };
    const searchParams = new URLSearchParams();
    if (width)
        searchParams.set("width", roundIfNumeric(width).toString());
    if (height)
        searchParams.set("height", roundIfNumeric(height).toString());
    if (format && ALLOWED_FORMATS.includes(format)) {
        searchParams.set("format", format);
    }
    if (params?.quality) {
        searchParams.set("quality", roundIfNumeric(params.quality).toString());
    }
    if (params?.resize)
        searchParams.set("resize", params.resize);
    if (searchParams.toString() === "")
        return base;
    return parsed.base.replace(STORAGE_URL_PREFIX, RENDER_URL_PREFIX) + "?" +
        searchParams.toString();
};
export const transform = ({ url, width, height, format, cdnOptions }) => {
    const parsed = parse(url);
    return generate({
        base: parsed.base,
        width: width || parsed.width,
        height: height || parsed.height,
        format: format || parsed.format,
        params: cdnOptions?.supabase || parsed.params,
    });
};
