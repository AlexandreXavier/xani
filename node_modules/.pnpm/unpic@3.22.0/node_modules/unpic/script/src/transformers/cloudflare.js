"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transform = exports.generate = exports.parse = void 0;
const utils_js_1 = require("../utils.js");
const cloudflareRegex = /https?:\/\/(?<host>[^\/]+)\/cdn-cgi\/image\/(?<transformations>[^\/]+)?\/(?<path>.*)$/g;
const parseTransforms = (transformations) => Object.fromEntries(transformations.split(",").map((t) => t.split("=")));
const formatUrl = ({ host, transformations = {}, path, }) => {
    const transformString = Object.entries(transformations).map(([key, value]) => `${key}=${value}`).join(",");
    const pathSegments = [
        host,
        "cdn-cgi",
        "image",
        transformString,
        path,
    ].join("/");
    return `https://${pathSegments}`;
};
const parse = (imageUrl) => {
    const url = (0, utils_js_1.toUrl)(imageUrl);
    const matches = [...url.toString().matchAll(cloudflareRegex)];
    if (!matches.length) {
        throw new Error("Invalid Cloudflare URL");
    }
    const group = matches[0].groups || {};
    const { transformations: transformString, ...baseParams } = group;
    const { width, height, f, ...transformations } = parseTransforms(transformString);
    const base = formatUrl({ ...baseParams, transformations });
    return {
        base: url.toString(),
        width: Number(width) || undefined,
        height: Number(height) || undefined,
        format: f,
        cdn: "cloudflare",
        params: { ...group, transformations },
    };
};
exports.parse = parse;
const generate = ({ base, width, height, format, params }) => {
    const parsed = (0, exports.parse)(base.toString());
    const props = {
        transformations: {},
        ...parsed.params,
        ...params,
    };
    if (width) {
        props.transformations.width = width?.toString();
    }
    if (height) {
        props.transformations.height = height?.toString();
    }
    if (format) {
        props.transformations.f = format === "jpg" ? "jpeg" : format;
    }
    props.transformations.fit ||= "cover";
    return new URL(formatUrl(props));
};
exports.generate = generate;
const transform = ({ url: originalUrl, width, height, format = "auto" }) => {
    const parsed = (0, exports.parse)(originalUrl);
    if (!parsed) {
        throw new Error("Invalid Cloudflare URL");
    }
    const props = {
        ...parsed,
        width,
        height,
        format,
    };
    return (0, exports.generate)(props);
};
exports.transform = transform;
